{"name":"Miniweb asp.net core","tagline":"An easy to use Simple CMS website that just needs page templates and content item templates in form of cshtml files. Runs on asp.net core","body":"# MiniWeb small CMS for asp.net core\r\n\r\n## What is miniweb\r\nFirstly an easy to use Simple CMS website that just needs page templates and content item templates in form of cshtml files\r\n\r\nSecondly it is an experiment with what .net coreclr can and can't do. I'm currently using\r\n* mvc and webapi\r\n* oAuth & basic authentication \r\n* custom configuration\r\n* custom taghelpers\r\n* custom middleware\r\n* embedded Razor View\r\n\r\nit currently runs on  1.0.0-rc1-final coreclr x64.\r\nTested on windows, mac osx, linux (ubuntu) and windows IoT \r\n\r\nwith some workarounds voor mac and linux (used until beta7)\r\n* remove \"resource\" line from Core project.json otherwise it won't build\r\n* make symlink from /src/MiniWeb.Core/Resources to /test/TestWeb/wwwroot/miniweb-resource for edit functionality \r\n\r\nInspired by the [MiniBlog](https://github.com/madskristensen/miniblog) package by Mats Kristensen.\r\n\r\nIt needs bootstrap v3.2 for now for the admin menu to work and contains a modified version of [bootstrap-wysiwyg](http://github.com/mindmup/bootstrap-wysiwyg)  \r\n\r\n## Example\r\nReference the MiniWeb.Core and one of the storage packages. Create an empty website. See the TestWeb project for an example implementation. Make sure the basic bootstrap files ar in the wwwroot folder.\r\n\r\nPage templates are stored in the /Views/Pages folder\r\n\r\nA page template example:\r\n```HTML\r\n@model MiniWeb.Core.SitePage\r\n@{\r\n\tLayout = Model.Layout;\r\n}\r\n<div role=\"main\" class=\"col-sm-9\" miniweb-section=\"content\">\r\n</div>\r\n\r\n<aside role=\"complementary\" class=\"col-sm-3\" miniweb-section=\"aside\">\r\n</aside>\r\n```\r\n\r\nContent items can be added to miniweb-section tags and should live in the /Views/Items folder\r\n\r\nA content item example\r\n```HTML\r\n@model MiniWeb.Core.ContentItem\r\n<article miniweb-template=\"@Model.Template\" >\r\n\t<h3 miniweb-prop=\"title\"></h3>\r\n\t<div miniweb-prop=\"content\" miniweb-edittype=\"html\"></div>\r\n\t<div miniweb-prop=\"other\" miniweb-edittype=\"html\"></div>\r\n</article>\r\n```\r\nevery tag can have a miniweb-prop attribute that will be stored in the content item, edittype is eiter single line or specified as html. \r\nFor this to work the miniweb taghelpers need to be registered for instance in the /Views/_ViewImports.cshtml\r\n```HTML\r\n@addTagHelper \"MiniWeb.Core.*, MiniWeb.Core\"\r\n```\r\n\r\n\r\nthe minimal startup will be something like this:\r\n```c#\r\npublic IConfiguration Configuration { get; set; }\r\n\r\npublic Startup(IHostingEnvironment env, IApplicationEnvironment appEnv)\r\n{\r\n\t// Setup configuration sources, not needed if defaults are used\r\n\tvar configuration = new ConfigurationBuilder(appEnv.ApplicationBasePath)\r\n\t\t\t\t\t.AddJsonFile(\"miniweb.json\", optional: true)\r\n\t\t\t\t\t.AddJsonFile($\"miniweb.{env.EnvironmentName}.json\", optional: true)\r\n\t\t\t\t\t.AddEnvironmentVariables();\r\n\t\t\t\t\t\r\n\t//Remember Configuration for use in ConfigureServices\r\n\tConfiguration = configuration.Build();\r\n}\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n\t// Default services used by MiniWeb\r\n\tservices.AddAntiforgery();\r\n\tservices.AddMvc();\r\n\r\n    //registers miniweb and json storage provider\r\n\tservices.AddMiniWebJsonStorage(Configuration);\r\n}\r\n\r\npublic void Configure(IApplicationBuilder app)\r\n{\r\n\t// Default middleware used by MiniWeb\r\n\tapp.UseDeveloperExceptionPage();\r\n\tapp.UseStaticFiles();\r\n\r\n\t//Registers the miniweb middleware and MVC Routes\r\n\tapp.UseMiniWebSite();\r\n}\r\n```\r\n\r\n## Storage\r\nCurrently there are two storage packages\r\n* MiniWeb.Storage.JsonStorage\r\n* MiniWeb.Storage.XmlStorage\r\n* MiniWeb.Storage.EFStorage (using SQL not tested on *nix)\r\n\r\nboth are filesystem stores and store their files in the /App_Data/Sitepages folder\r\n\r\n## TODO\r\n* Multiple edittypes\r\n* Extra Storage Provider examples (documentdb, sql)\r\n* Better image handling (enable picking existing images as well)\r\n* Upgrade to new bootstrap\r\n* Setup integration with clientside packages (bower grunt and so on)\r\n* Wait for .net core release :D\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
@model MiniWeb.Core.ISitePage
@using MiniWeb.Core
@inject IMiniWebSite MiniWebSite
<!DOCTYPE html>

<html>
<head prefix="og: http://ogp.me/ns#">
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
	<title>@Model.MetaTitle - @MiniWebSite.Configuration.Title</title>
	<meta name="description" content="@Model.MetaDescription" />
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"/>
	<link rel="stylesheet" href="/css/site.css" />

	<meta name="application-name" content="@MiniWebSite.Configuration.Title" />
	<meta name="msapplication-TileColor" content="#ffffff" />

	<meta property="og:title" content="@Model.MetaTitle" />
	<meta property="og:type" content="website" />

</head>
<body class="@Model.GetBodyCss()">
	<div class="container px-0">
		<header role="banner">
			HEADER
		</header>
		<nav class="navbar navbar-expand-lg navbar-light">
			<div class="container-fluid">
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent,#navbarSupportedSubContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
				  <span class="navbar-toggler-icon"></span>
				</button>
				<div class="navbar-collapse collapse" id="navbarSupportedContent">
					<ul class="nav navbar-nav" miniweb-menu="/">
						<miniweb-menuitem>
							@{
								var sitePage = ViewData["MenuSitePage"] as ISitePage;
								var currentUrl = ViewData["CurrentUrl"] as string;
							}
							<li class="nav-item @(!sitePage.ShowInMenu || !sitePage.Visible ? "miniweb-hidden-menu" : "")">
								<a class="nav-link @(sitePage.IsActiveFor(currentUrl) ? "active" : "")" href="@(MiniWebSite.GetPageUrl(sitePage))">@sitePage.Title</a>
							</li>
						</miniweb-menuitem>
					</ul>
				</div>
			</div>
		</nav>
		@*Do we show submenu?*@
		@if ((await MiniWebSite.Pages()).Any(p => Model.BaseUrl == p.Url && p.Pages.Any(s => s.VisibleInMenu())))
		{
			<nav class="navbar navbar-expand-lg navbar-light bg-light submenu">
				<div role="navigation" class="container-fluid">
					<div class="navbar-collapse collapse" id="navbarSupportedSubContent">
						<ul class="nav navbar-nav" miniweb-menu="/@Model.BaseUrl">
							<miniweb-menuitem>
								@{
									var subSitePage = ViewData["MenuSitePage"] as ISitePage;
									var subCurrentUrl = ViewData["CurrentUrl"] as string;
								}
								<li class="nav-item @(!subSitePage.ShowInMenu || !subSitePage.Visible ? "miniweb-hidden-menu" : "")">
									<a class="nav-link @(subSitePage.IsActiveFor(subCurrentUrl) ? "active" : "")" href="@(MiniWebSite.GetPageUrl(subSitePage))">@subSitePage.Title</a>
								</li>
							</miniweb-menuitem>
						</ul>
					</div>
				</div>
			</nav>
		}
	</div>
	<div class="container px-0">
		@RenderBody()
	</div>
	<div class="container px-0">
		<footer class="text-center" role="contentinfo" itemscope itemtype="http://schema.org/Person" itemprop="author">
			<span>
				Footer
			</span>
		</footer>
	</div>

	<script src="/scripts/site.js"></script>

	<miniwebadmin />

</body>
</html>
